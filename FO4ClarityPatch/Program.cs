using System;
using System.Threading.Tasks;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Synthesis;

namespace FO4ClarityPatch
{
    public class Program
    {
        private static Lazy<Settings> _settings;
        private static Settings Settings => _settings.Value;
        
        public static async Task<int> Main(string[] args) => await SynthesisPipeline.Instance
            .AddPatch<IFallout4Mod, IFallout4ModGetter>(RunPatch)
            .SetAutogeneratedSettings("Settings", "settings.json", out _settings)
            .SetTypicalOpen(GameRelease.Fallout4, "Clarity_Patch.esp")
            .Run(args);

        public static void RunPatch(IPatcherState<IFallout4Mod, IFallout4ModGetter> state)
        {
            foreach (var cellContext  in state.LoadOrder.PriorityOrder.Cell().WinningContextOverrides(state.LinkCache))
            {
                var cell = cellContext.Record;
                if(!cell.Flags.HasFlag(Cell.Flag.IsInteriorCell)) continue;
                if(cell.Flags.HasFlag(Cell.Flag.HiddenFromInteriorCellList)) continue;
                if(cell.Lighting is null) continue;

                if (Settings.Mode == RunMode.Clarity3)
                {
                    if (cell.Lighting.FogPower == 2.75f) continue;
                    var overridenCell = cellContext.GetOrAddAsOverride(state.PatchMod);

                    overridenCell.Lighting.FogNear = 1.0f;
                    overridenCell.Lighting.FogPower = 2.75f;
                }
                else if (Settings.Mode == RunMode.Clarity4)
                {
                    if (cell.Lighting.FogNear != 1000.0f || cell.Lighting.FogFar != 600000.0f || cell.Lighting.FogPower != 0.5f)
                    {
                        var overridenCell = cellContext.GetOrAddAsOverride(state.PatchMod);

                        overridenCell.Lighting.FogNear = 1000.0f;
                        overridenCell.Lighting.FogFar = 600000.0f;
                        overridenCell.Lighting.FogPower = 0.5f;
                    }
                }
            }
        }
    }
}